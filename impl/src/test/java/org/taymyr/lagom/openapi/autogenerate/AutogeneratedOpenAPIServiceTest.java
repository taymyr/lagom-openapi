package org.taymyr.lagom.openapi.autogenerate;

import com.lightbend.lagom.javadsl.api.transport.NotFound;
import org.assertj.core.api.Condition;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.taymyr.lagom.openapi.TestUtils;

import java.io.IOException;
import java.net.URISyntaxException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.taymyr.lagom.javadsl.api.transport.MessageProtocols.YAML;

class AutogeneratedOpenAPIServiceTest {

    @Test
    @DisplayName("Service without OpenAPIDefinition annotation should return 404")
    void shouldReturn404WithoutAnnotation() {
        EmptyTestServiceImpl service = new EmptyTestServiceImpl();
        assertThatExceptionOfType(NotFound.class)
            .isThrownBy(() -> service.openapi().invokeWithHeaders(null, null))
            .withMessage("OpenAPI specification not found")
            .has(new Condition<>(thr -> thr.errorCode().http() == 404, "Error code must be 404"));
    }

    @Test
    @DisplayName("Test autogenerate yaml specification")
    void shouldNormalGenerateYaml() throws IOException, URISyntaxException {
        String originalSpec = TestUtils.readResourceAsString(getClass().getResource("/autogenerated.yml"));
        TestServiceImpl service = new TestServiceImpl();
        assertThat(service.openapi().invokeWithHeaders(null, null))
            .isCompleted()
            .isCompletedWithValueMatching(pair -> pair.first().status() == 200, "Status code must be 200")
            .isCompletedWithValueMatching(pair -> pair.first().protocol().equals(YAML), "Protocol must be YAML")
            .isCompletedWithValueMatching(pair -> pair.second().equals(originalSpec), "Must be equal to originalSpec")
            .isDone();
    }

}
