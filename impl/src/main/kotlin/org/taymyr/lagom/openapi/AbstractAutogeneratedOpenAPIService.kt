package org.taymyr.lagom.openapi

import akka.NotUsed
import com.lightbend.lagom.javadsl.api.transport.NotFound
import com.lightbend.lagom.javadsl.server.HeaderServiceCall
import io.swagger.v3.oas.annotations.OpenAPIDefinition
import mu.KLogging
import org.taymyr.lagom.javadsl.api.transport.MessageProtocols.YAML
import org.taymyr.lagom.javadsl.api.transport.ResponseHeaders.ok
import java.util.concurrent.CompletableFuture.completedFuture

abstract class AbstractAutogeneratedOpenAPIService : OpenAPIService {

    private var apiSpec: String? = null
    private var isAnnotated: Boolean = this.javaClass.isAnnotationPresentInherited(OpenAPIDefinition::class.java)

    override fun openapi(): HeaderServiceCall<NotUsed, String> {
        return HeaderServiceCall { _, _ -> run {
            if (!isAnnotated) {
                throw NotFound("OpenAPI specification not found")
            } else {
                if (apiSpec == null) {
                    apiSpec = SwaggerGenerator(this).generateYaml()
                }
            }
            return@run completedFuture(ok(YAML, apiSpec))
        } }
    }

    companion object : KLogging()
}
