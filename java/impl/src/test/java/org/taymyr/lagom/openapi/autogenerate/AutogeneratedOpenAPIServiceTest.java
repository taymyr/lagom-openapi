package org.taymyr.lagom.openapi.autogenerate;

import akka.japi.Pair;
import com.lightbend.lagom.javadsl.api.transport.NotFound;
import com.lightbend.lagom.javadsl.api.transport.ResponseHeader;
import io.swagger.v3.core.util.Yaml;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.assertj.core.api.Condition;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.taymyr.lagom.openapi.autogenerate.cases.ParameterService;
import org.taymyr.lagom.openapi.autogenerate.cases.PetsService;
import org.taymyr.lagom.openapi.autogenerate.cases.RefLinkService;
import org.taymyr.lagom.openapi.autogenerate.cases.RefSecurityService;
import org.taymyr.lagom.openapi.autogenerate.cases.RequestExampleService;
import org.taymyr.lagom.openapi.autogenerate.cases.SecurityService;
import org.taymyr.lagom.openapi.autogenerate.cases.ServersService;
import org.taymyr.lagom.openapi.autogenerate.empty.EmptyTestServiceImpl;
import org.taymyr.lagom.openapi.internal.ServiceReader;

import java.io.IOException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

import static com.typesafe.config.ConfigFactory.empty;
import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.taymyr.lagom.javadsl.api.transport.MessageProtocols.YAML;
import static org.taymyr.lagom.openapi.TestUtils.eventually;
import static org.taymyr.lagom.openapi.TestUtils.resourceAsString;
import static org.taymyr.lagom.openapi.TestUtils.yamlToJson;

class AutogeneratedOpenAPIServiceTest {

    private static final Info INFO = new Info().title("test").description("info").version("0.0.1");

    @Test
    @DisplayName("Service without OpenAPIDefinition annotation should return 404")
    void shouldReturn404WithoutAnnotation() {
        EmptyTestServiceImpl service = new EmptyTestServiceImpl(empty());
        assertThatExceptionOfType(NotFound.class)
            .isThrownBy(() -> service.openapi().invokeWithHeaders(null, null))
            .withMessage("OpenAPI specification not found")
            .has(new Condition<>(thr -> thr.errorCode().http() == 404, "Error code must be 404"));
    }

    @Test
    @DisplayName("Test autogenerate yaml specification")
    void shouldNormalGenerateYaml() throws InterruptedException, ExecutionException, TimeoutException, IOException {
        String expected = yamlToJson(resourceAsString("pets.yml"));
        PetsService.Impl service = new PetsService.Impl(empty());
        Pair<ResponseHeader, String> openapi = eventually(service.openapi().invokeWithHeaders(null, null));
        assertThat(openapi.first().status()).isEqualTo(200);
        assertThat(openapi.first().protocol()).isEqualTo(YAML);
        assertThatJson(yamlToJson(openapi.second())).isEqualTo(expected);
    }

    @Test
    @DisplayName("Test cases with ref")
    void testSecuritySchemeWithRef() throws IOException {
        Components components = new Components();
        components
            .addSecuritySchemes(
                "Security",
                new SecurityScheme()
                    .description("Security Example")
                    .type(SecurityScheme.Type.OAUTH2)
            );

        final OpenAPI oapi = new OpenAPI().info(INFO).components(components);
        final String expected = yamlToJson(resourceAsString("security_scheme_with_ref.yml"));
        assertThatJson(
            yamlToJson(Yaml.pretty(new ServiceReader(oapi).read(new RefSecurityService.Impl(empty()))))
        ).isEqualTo(expected);
    }

    @Test
    @DisplayName("Test service with request example")
    void testServiceWithRequestExample() throws IOException {
        final OpenAPI oapi = new OpenAPI().info(INFO);
        final String expected = yamlToJson(resourceAsString("request_example.yml"));
        assertThatJson(
            yamlToJson(Yaml.pretty(new ServiceReader(oapi).read(new RequestExampleService.Impl(empty()))))
        ).isEqualTo(expected);
    }

    @Test
    @DisplayName("Test service with link")
    void testServiceWithLink() throws IOException {
        final OpenAPI oapi = new OpenAPI().info(INFO);
        final String expected = yamlToJson(resourceAsString("operation_link.yml"));
        assertThatJson(
            yamlToJson(Yaml.pretty(new ServiceReader(oapi).read(new RefLinkService.Impl(empty()))))
        ).isEqualTo(expected);
    }

    @Test
    @DisplayName("Test service with servers")
    void testServiceWithServers() throws IOException {
        final OpenAPI oapi = new OpenAPI().info(INFO);
        final String expected = yamlToJson(resourceAsString("servers.yml"));
        assertThatJson(
            yamlToJson(Yaml.pretty(new ServiceReader(oapi).read(new ServersService.Impl(empty()))))
        ).isEqualTo(expected);
    }

    @Test
    @DisplayName("Test service with securities")
    void testSecurityService() throws IOException {
        final OpenAPI oapi = new OpenAPI().info(INFO);
        final String expected = yamlToJson(resourceAsString("security.yml"));
        assertThatJson(
            yamlToJson(Yaml.pretty(new ServiceReader(oapi).read(new SecurityService.Impl(empty()))))
        ).isEqualTo(expected);
    }

    @Test
    @DisplayName("Test service with parameters")
    void testParametersService() throws IOException {
        final OpenAPI oapi = new OpenAPI().info(INFO);
        final String expected = yamlToJson(resourceAsString("parameters.yml"));
        assertThatJson(
            yamlToJson(Yaml.pretty(new ServiceReader(oapi).read(new ParameterService.Impl(empty()))))
        ).isEqualTo(expected);
    }

}

